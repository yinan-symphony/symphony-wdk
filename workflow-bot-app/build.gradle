import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'workflow-bot.java-conventions'
    id 'org.springframework.boot' version '2.7.8'
}

javadoc {
    options.group 'WDK Bot App', 'com.symphony.bdk.workflow*'
}

dependencies {
    implementation project(':workflow-language')

    implementation platform('org.finos.symphony.bdk:symphony-bdk-bom:2.12.0') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    implementation ('org.apache.httpcomponents.client5:httpclient5-fluent:5.1.3') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation 'org.finos.symphony.bdk:symphony-bdk-core-spring-boot-starter'
    implementation 'org.finos.symphony.bdk.ext:symphony-group-extension'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.google.guava:guava:31.1-android'

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly ('com.h2database:h2') {
        version {
            strictly '2.1.214'
        }
    }

    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.11'

    implementation 'org.aspectj:aspectjrt:1.9.9.1'
    implementation 'org.aspectj:aspectjweaver:1.9.9.1'

    implementation platform('org.camunda.bpm:camunda-bom:7.18.0')
    implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter'
    // used to serializable objects as variables
    implementation 'org.camunda.bpm:camunda-engine-plugin-spin'
    implementation 'org.camunda.spin:camunda-spin-core'
    implementation 'org.camunda.spin:camunda-spin-dataformat-json-jackson'

    implementation 'org.codehaus.groovy:groovy-all:3.0.10'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.github.java-json-tools:json-schema-validator:2.2.14'
    implementation 'org.mozilla:rhino:1.7.14' // SNYK-JAVA-ORGMOZILLA-1314295

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation('org.reflections:reflections:0.9.11') {
        version {
            strictly("0.9.11") // https://github.com/ronmamo/reflections/issues/277
        }
    }

    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.1'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.awaitility:awaitility'
    testImplementation ('com.github.tomakehurst:wiremock-jre8:2.34.0') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    testImplementation 'io.rest-assured:rest-assured:4.5.1'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation("org.camunda.community.mockito:camunda-platform-7-mockito:6.17.1") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
}

bootBuildImage {
    imageName = "workflow-bot"
    builder = "gcr.io/buildpacks/builder"
}

bootJar {
    classifier = 'boot'
    manifest {
        // to be able to use loader.path to add custom activities to the workflow bot
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
}

jar {
    enabled = true
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
        }
        plain(MavenPublication) {
            from components.java
            artifactId = "${project.name}-plain"
            pom(rootProject.ext.pomDefinition)
            pom.withXml {
                asNode().children().first().plus {
                    setResolveStrategy(Closure.DELEGATE_FIRST)
                    'name' project.name
                    'description' project.description
                }
            }
        }
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "wdk.version": project.version
    ]
}

signing {
  required { !rootProject.ext.projectVersion.endsWith('SNAPSHOT') }
  sign publishing.publications.plain
}
